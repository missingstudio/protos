syntax = "proto3";
package llm.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "llm/v1/models.proto";

service LLMService {
  rpc ChatCompletions(ChatCompletionRequest) returns (ChatCompletionResponse) {
    option (google.api.http).post = "/api/v1/chat/completions";
    option (google.api.http).body = "*";
  }

  rpc StreamChatCompletions(ChatCompletionRequest) returns (stream google.api.HttpBody) {
    option (google.api.http).post = "/api/v1/chat/completions:stream";
    option (google.api.http).body = "*";
  }

  rpc ListModels(ModelRequest) returns (ModelResponse) {
    option (google.api.http).get = "/api/v1/models";
    option (google.api.http).body = "*";
  }

  rpc ListProviders(google.protobuf.Empty) returns (ListProvidersResponse) {
    option (google.api.http).get = "/api/v1/providers";
    option (google.api.http).body = "*";
  }

  rpc CreateProvider(CreateProviderRequest) returns (CreateProviderResponse) {
    option (google.api.http).post = "/api/v1/providers";
    option (google.api.http).body = "*";
  }

  rpc GetProvider(GetProviderRequest) returns (GetProviderResponse) {
    option (google.api.http) = {get: "/api/v1/providers/{name}"};
  }

  rpc UpsertProvider(UpdateProviderRequest) returns (UpdateProviderResponse) {
    option (google.api.http).put = "/api/v1/providers/{name}";
    option (google.api.http).body = "*";
  }

  rpc DeleteProvider(DeleteProviderRequest) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/api/v1/providers/{name}";
  }

  rpc GetProviderConfig(GetProviderConfigRequest) returns (GetProviderConfigResponse) {
    option (google.api.http) = {get: "/api/v1/providers/{name}/config"};
  }

  rpc ListAPIKeys(google.protobuf.Empty) returns (ListAPIKeysResponse) {
    option (google.api.http).get = "/api/v1/keys";
    option (google.api.http).body = "*";
  }

  rpc CreateAPIKey(CreateAPIKeyRequest) returns (CreateAPIKeyResponse) {
    option (google.api.http).post = "/api/v1/keys";
    option (google.api.http).body = "*";
  }

  rpc GetAPIKey(GetAPIKeyRequest) returns (GetAPIKeyResponse) {
    option (google.api.http) = {get: "/api/v1/keys/{id}"};
  }

  rpc UpdateAPIKey(UpdateAPIKeyRequest) returns (UpdateAPIKeyResponse) {
    option (google.api.http).put = "/api/v1/keys/{id}";
    option (google.api.http).body = "*";
  }

  rpc DeleteAPIKey(DeleteAPIKeyRequest) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/api/v1/keys/{id}";
  }

  rpc ListTrackingLogs(google.protobuf.Empty) returns (LogResponse) {
    option (google.api.http).get = "/api/v1/tracking/logs";
    option (google.api.http).body = "*";
  }
}

message ChatCompletionRequest {
  string model = 1 [(buf.validate.field).required = true];
  // a list of messages comprising all the conversation so far
  repeated ChatCompletionMessage messages = 2 [(buf.validate.field).repeated.min_items = 1];

  // temperature of the sampling, between [0, 2]. default = 1.0
  optional float temperature = 3;

  optional uint64 seed = 4;
  // number of chat completion choices to generate for each input message. default = 1
  optional uint64 n = 5;
  optional float presence_penalty = 6 [
    (buf.validate.field).float.gt = -2.0,
    (buf.validate.field).float.lt = 2.0
  ];
  optional float frequency_penalty = 7 [
    (buf.validate.field).float.gt = -2.0,
    (buf.validate.field).float.lt = 2.0
  ];

  // whether to stream partial completions back as they are generated. default = false
  optional bool stream = 8;
  optional float top_k = 9;
  optional float top_p = 10;
  repeated string stop = 11;
  optional uint64 max_tokens = 12;
  optional bool logprobs = 13;
  optional uint64 top_logprobs = 14;
  optional google.protobuf.Struct logit_bias = 15;
  optional ResponseFormat response_format = 16;
  optional string user = 17;
  optional google.protobuf.Struct tool_choice = 18;
  optional string suffix = 19;
  optional bool echo = 20;
  optional uint64 best_of = 21;
}

message ChatCompletionResponse {
  // unique id for the chat completion.
  string id = 1;
  // object type, which is always "chat.completion[.chunk]".
  string object = 2;
  // unix timestamp (in seconds) of when the chat completion was created.
  uint64 created = 3;
  // model used for the completion
  string model = 4;
  // list of generated completion choices for the input prompt
  repeated CompletionChoice choices = 5;
  // usage statistics for the completion request.
  Usage usage = 6;
  bool cached = 7;
}

message ModelRequest {
  string provider = 1;
}

message ModelResponse {
  map<string, ProviderModels> models = 1;
}

message ListProvidersResponse {
  repeated Provider providers = 1;
}

message GetProviderRequest {
  string name = 1;
}

message GetProviderResponse {
  Provider provider = 1;
}

message CreateProviderRequest {
  string name = 1;
  google.protobuf.Struct config = 2;
}

message CreateProviderResponse {
  string name = 1;
  google.protobuf.Struct config = 2;
}

message UpdateProviderRequest {
  string name = 1;
  google.protobuf.Struct config = 2;
}

message UpdateProviderResponse {
  string name = 1;
  google.protobuf.Struct config = 2;
}

message GetProviderConfigRequest {
  string name = 1;
}

message GetProviderConfigResponse {
  google.protobuf.Struct config = 1;
}

message DeleteProviderRequest {
  string name = 1;
}

message LogResponse {
  repeated google.protobuf.Struct logs = 1;
}

message ListAPIKeysResponse {
  repeated APIKey keys = 1;
}

message CreateAPIKeyRequest {
  string name = 1;
}

message CreateAPIKeyResponse {
  APIKey key = 1;
}

message GetAPIKeyRequest {
  string id = 1;
}

message GetAPIKeyResponse {
  APIKey key = 1;
}

message UpdateAPIKeyRequest {
  string id = 1;
  string name = 2;
}

message UpdateAPIKeyResponse {
  APIKey key = 1;
}

message DeleteAPIKeyRequest {
  string id = 1;
}
