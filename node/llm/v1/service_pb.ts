// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file llm/v1/service.proto (package llm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct } from "@bufbuild/protobuf";
import { APIKey, ChatCompletionMessage, CompletionChoice, Provider, ProviderModels, ResponseFormat, Usage } from "./models_pb";

/**
 * @generated from message llm.v1.ChatCompletionRequest
 */
export class ChatCompletionRequest extends Message<ChatCompletionRequest> {
  /**
   * @generated from field: string model = 1;
   */
  model = "";

  /**
   * a list of messages comprising all the conversation so far
   *
   * @generated from field: repeated llm.v1.ChatCompletionMessage messages = 2;
   */
  messages: ChatCompletionMessage[] = [];

  /**
   * temperature of the sampling, between [0, 2]. default = 1.0
   *
   * @generated from field: optional float temperature = 3;
   */
  temperature?: number;

  /**
   * @generated from field: optional uint64 seed = 4;
   */
  seed?: bigint;

  /**
   * number of chat completion choices to generate for each input message. default = 1
   *
   * @generated from field: optional uint64 n = 5;
   */
  n?: bigint;

  /**
   * @generated from field: optional float presence_penalty = 6;
   */
  presencePenalty?: number;

  /**
   * @generated from field: optional float frequency_penalty = 7;
   */
  frequencyPenalty?: number;

  /**
   * whether to stream partial completions back as they are generated. default = false
   *
   * @generated from field: optional bool stream = 8;
   */
  stream?: boolean;

  /**
   * @generated from field: optional float top_k = 9;
   */
  topK?: number;

  /**
   * @generated from field: optional float top_p = 10;
   */
  topP?: number;

  /**
   * @generated from field: repeated string stop = 11;
   */
  stop: string[] = [];

  /**
   * @generated from field: optional uint64 max_tokens = 12;
   */
  maxTokens?: bigint;

  /**
   * @generated from field: optional bool logprobs = 13;
   */
  logprobs?: boolean;

  /**
   * @generated from field: optional uint64 top_logprobs = 14;
   */
  topLogprobs?: bigint;

  /**
   * @generated from field: optional google.protobuf.Struct logit_bias = 15;
   */
  logitBias?: Struct;

  /**
   * @generated from field: optional llm.v1.ResponseFormat response_format = 16;
   */
  responseFormat?: ResponseFormat;

  /**
   * @generated from field: optional string user = 17;
   */
  user?: string;

  /**
   * @generated from field: optional google.protobuf.Struct tool_choice = 18;
   */
  toolChoice?: Struct;

  /**
   * @generated from field: optional string suffix = 19;
   */
  suffix?: string;

  /**
   * @generated from field: optional bool echo = 20;
   */
  echo?: boolean;

  /**
   * @generated from field: optional uint64 best_of = 21;
   */
  bestOf?: bigint;

  constructor(data?: PartialMessage<ChatCompletionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ChatCompletionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "messages", kind: "message", T: ChatCompletionMessage, repeated: true },
    { no: 3, name: "temperature", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "seed", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "n", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: "presence_penalty", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 7, name: "frequency_penalty", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 8, name: "stream", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "top_k", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 10, name: "top_p", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 11, name: "stop", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "max_tokens", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 13, name: "logprobs", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 14, name: "top_logprobs", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 15, name: "logit_bias", kind: "message", T: Struct, opt: true },
    { no: 16, name: "response_format", kind: "message", T: ResponseFormat, opt: true },
    { no: 17, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: "tool_choice", kind: "message", T: Struct, opt: true },
    { no: 19, name: "suffix", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 20, name: "echo", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 21, name: "best_of", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatCompletionRequest {
    return new ChatCompletionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatCompletionRequest {
    return new ChatCompletionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatCompletionRequest {
    return new ChatCompletionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChatCompletionRequest | PlainMessage<ChatCompletionRequest> | undefined, b: ChatCompletionRequest | PlainMessage<ChatCompletionRequest> | undefined): boolean {
    return proto3.util.equals(ChatCompletionRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.ChatCompletionResponse
 */
export class ChatCompletionResponse extends Message<ChatCompletionResponse> {
  /**
   * unique id for the chat completion.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * object type, which is always "chat.completion[.chunk]".
   *
   * @generated from field: string object = 2;
   */
  object = "";

  /**
   * unix timestamp (in seconds) of when the chat completion was created.
   *
   * @generated from field: uint64 created = 3;
   */
  created = protoInt64.zero;

  /**
   * model used for the completion
   *
   * @generated from field: string model = 4;
   */
  model = "";

  /**
   * list of generated completion choices for the input prompt
   *
   * @generated from field: repeated llm.v1.CompletionChoice choices = 5;
   */
  choices: CompletionChoice[] = [];

  /**
   * usage statistics for the completion request.
   *
   * @generated from field: llm.v1.Usage usage = 6;
   */
  usage?: Usage;

  /**
   * @generated from field: bool cached = 7;
   */
  cached = false;

  constructor(data?: PartialMessage<ChatCompletionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ChatCompletionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "created", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "choices", kind: "message", T: CompletionChoice, repeated: true },
    { no: 6, name: "usage", kind: "message", T: Usage },
    { no: 7, name: "cached", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatCompletionResponse {
    return new ChatCompletionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatCompletionResponse {
    return new ChatCompletionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatCompletionResponse {
    return new ChatCompletionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChatCompletionResponse | PlainMessage<ChatCompletionResponse> | undefined, b: ChatCompletionResponse | PlainMessage<ChatCompletionResponse> | undefined): boolean {
    return proto3.util.equals(ChatCompletionResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.ModelRequest
 */
export class ModelRequest extends Message<ModelRequest> {
  /**
   * @generated from field: string provider = 1;
   */
  provider = "";

  constructor(data?: PartialMessage<ModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelRequest {
    return new ModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelRequest {
    return new ModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelRequest {
    return new ModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModelRequest | PlainMessage<ModelRequest> | undefined, b: ModelRequest | PlainMessage<ModelRequest> | undefined): boolean {
    return proto3.util.equals(ModelRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.ModelResponse
 */
export class ModelResponse extends Message<ModelResponse> {
  /**
   * @generated from field: map<string, llm.v1.ProviderModels> models = 1;
   */
  models: { [key: string]: ProviderModels } = {};

  constructor(data?: PartialMessage<ModelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ModelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "models", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ProviderModels} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelResponse {
    return new ModelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelResponse {
    return new ModelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelResponse {
    return new ModelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ModelResponse | PlainMessage<ModelResponse> | undefined, b: ModelResponse | PlainMessage<ModelResponse> | undefined): boolean {
    return proto3.util.equals(ModelResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.ListProvidersResponse
 */
export class ListProvidersResponse extends Message<ListProvidersResponse> {
  /**
   * @generated from field: repeated llm.v1.Provider providers = 1;
   */
  providers: Provider[] = [];

  constructor(data?: PartialMessage<ListProvidersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ListProvidersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "providers", kind: "message", T: Provider, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProvidersResponse {
    return new ListProvidersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProvidersResponse {
    return new ListProvidersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProvidersResponse {
    return new ListProvidersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProvidersResponse | PlainMessage<ListProvidersResponse> | undefined, b: ListProvidersResponse | PlainMessage<ListProvidersResponse> | undefined): boolean {
    return proto3.util.equals(ListProvidersResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.GetProviderRequest
 */
export class GetProviderRequest extends Message<GetProviderRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.GetProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderRequest {
    return new GetProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderRequest {
    return new GetProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderRequest {
    return new GetProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProviderRequest | PlainMessage<GetProviderRequest> | undefined, b: GetProviderRequest | PlainMessage<GetProviderRequest> | undefined): boolean {
    return proto3.util.equals(GetProviderRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.GetProviderResponse
 */
export class GetProviderResponse extends Message<GetProviderResponse> {
  /**
   * @generated from field: llm.v1.Provider provider = 1;
   */
  provider?: Provider;

  constructor(data?: PartialMessage<GetProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.GetProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "provider", kind: "message", T: Provider },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderResponse {
    return new GetProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderResponse {
    return new GetProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderResponse {
    return new GetProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProviderResponse | PlainMessage<GetProviderResponse> | undefined, b: GetProviderResponse | PlainMessage<GetProviderResponse> | undefined): boolean {
    return proto3.util.equals(GetProviderResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.CreateProviderRequest
 */
export class CreateProviderRequest extends Message<CreateProviderRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Struct config = 2;
   */
  config?: Struct;

  constructor(data?: PartialMessage<CreateProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.CreateProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProviderRequest {
    return new CreateProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProviderRequest {
    return new CreateProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProviderRequest {
    return new CreateProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProviderRequest | PlainMessage<CreateProviderRequest> | undefined, b: CreateProviderRequest | PlainMessage<CreateProviderRequest> | undefined): boolean {
    return proto3.util.equals(CreateProviderRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.CreateProviderResponse
 */
export class CreateProviderResponse extends Message<CreateProviderResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Struct config = 2;
   */
  config?: Struct;

  constructor(data?: PartialMessage<CreateProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.CreateProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProviderResponse {
    return new CreateProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProviderResponse {
    return new CreateProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProviderResponse {
    return new CreateProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProviderResponse | PlainMessage<CreateProviderResponse> | undefined, b: CreateProviderResponse | PlainMessage<CreateProviderResponse> | undefined): boolean {
    return proto3.util.equals(CreateProviderResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.UpdateProviderRequest
 */
export class UpdateProviderRequest extends Message<UpdateProviderRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Struct config = 2;
   */
  config?: Struct;

  constructor(data?: PartialMessage<UpdateProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.UpdateProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProviderRequest {
    return new UpdateProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProviderRequest {
    return new UpdateProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProviderRequest {
    return new UpdateProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProviderRequest | PlainMessage<UpdateProviderRequest> | undefined, b: UpdateProviderRequest | PlainMessage<UpdateProviderRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProviderRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.UpdateProviderResponse
 */
export class UpdateProviderResponse extends Message<UpdateProviderResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.protobuf.Struct config = 2;
   */
  config?: Struct;

  constructor(data?: PartialMessage<UpdateProviderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.UpdateProviderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProviderResponse {
    return new UpdateProviderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProviderResponse {
    return new UpdateProviderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProviderResponse {
    return new UpdateProviderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProviderResponse | PlainMessage<UpdateProviderResponse> | undefined, b: UpdateProviderResponse | PlainMessage<UpdateProviderResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProviderResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.GetProviderConfigRequest
 */
export class GetProviderConfigRequest extends Message<GetProviderConfigRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetProviderConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.GetProviderConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderConfigRequest {
    return new GetProviderConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderConfigRequest {
    return new GetProviderConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderConfigRequest {
    return new GetProviderConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProviderConfigRequest | PlainMessage<GetProviderConfigRequest> | undefined, b: GetProviderConfigRequest | PlainMessage<GetProviderConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetProviderConfigRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.GetProviderConfigResponse
 */
export class GetProviderConfigResponse extends Message<GetProviderConfigResponse> {
  /**
   * @generated from field: google.protobuf.Struct config = 1;
   */
  config?: Struct;

  constructor(data?: PartialMessage<GetProviderConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.GetProviderConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProviderConfigResponse {
    return new GetProviderConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProviderConfigResponse {
    return new GetProviderConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProviderConfigResponse {
    return new GetProviderConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProviderConfigResponse | PlainMessage<GetProviderConfigResponse> | undefined, b: GetProviderConfigResponse | PlainMessage<GetProviderConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetProviderConfigResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.DeleteProviderRequest
 */
export class DeleteProviderRequest extends Message<DeleteProviderRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteProviderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.DeleteProviderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProviderRequest {
    return new DeleteProviderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProviderRequest {
    return new DeleteProviderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProviderRequest {
    return new DeleteProviderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProviderRequest | PlainMessage<DeleteProviderRequest> | undefined, b: DeleteProviderRequest | PlainMessage<DeleteProviderRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProviderRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.LogResponse
 */
export class LogResponse extends Message<LogResponse> {
  /**
   * @generated from field: repeated google.protobuf.Struct logs = 1;
   */
  logs: Struct[] = [];

  constructor(data?: PartialMessage<LogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.LogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogResponse {
    return new LogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogResponse {
    return new LogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogResponse {
    return new LogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LogResponse | PlainMessage<LogResponse> | undefined, b: LogResponse | PlainMessage<LogResponse> | undefined): boolean {
    return proto3.util.equals(LogResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.ListAPIKeysResponse
 */
export class ListAPIKeysResponse extends Message<ListAPIKeysResponse> {
  /**
   * @generated from field: repeated llm.v1.APIKey keys = 1;
   */
  keys: APIKey[] = [];

  constructor(data?: PartialMessage<ListAPIKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ListAPIKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: APIKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAPIKeysResponse {
    return new ListAPIKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAPIKeysResponse | PlainMessage<ListAPIKeysResponse> | undefined, b: ListAPIKeysResponse | PlainMessage<ListAPIKeysResponse> | undefined): boolean {
    return proto3.util.equals(ListAPIKeysResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.CreateAPIKeyRequest
 */
export class CreateAPIKeyRequest extends Message<CreateAPIKeyRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.CreateAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAPIKeyRequest {
    return new CreateAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAPIKeyRequest | PlainMessage<CreateAPIKeyRequest> | undefined, b: CreateAPIKeyRequest | PlainMessage<CreateAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateAPIKeyRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.CreateAPIKeyResponse
 */
export class CreateAPIKeyResponse extends Message<CreateAPIKeyResponse> {
  /**
   * @generated from field: llm.v1.APIKey key = 1;
   */
  key?: APIKey;

  constructor(data?: PartialMessage<CreateAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.CreateAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: APIKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAPIKeyResponse {
    return new CreateAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAPIKeyResponse | PlainMessage<CreateAPIKeyResponse> | undefined, b: CreateAPIKeyResponse | PlainMessage<CreateAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(CreateAPIKeyResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.GetAPIKeyRequest
 */
export class GetAPIKeyRequest extends Message<GetAPIKeyRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.GetAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAPIKeyRequest {
    return new GetAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAPIKeyRequest {
    return new GetAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAPIKeyRequest {
    return new GetAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAPIKeyRequest | PlainMessage<GetAPIKeyRequest> | undefined, b: GetAPIKeyRequest | PlainMessage<GetAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(GetAPIKeyRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.GetAPIKeyResponse
 */
export class GetAPIKeyResponse extends Message<GetAPIKeyResponse> {
  /**
   * @generated from field: llm.v1.APIKey key = 1;
   */
  key?: APIKey;

  constructor(data?: PartialMessage<GetAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.GetAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: APIKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAPIKeyResponse {
    return new GetAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAPIKeyResponse {
    return new GetAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAPIKeyResponse {
    return new GetAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAPIKeyResponse | PlainMessage<GetAPIKeyResponse> | undefined, b: GetAPIKeyResponse | PlainMessage<GetAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(GetAPIKeyResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.UpdateAPIKeyRequest
 */
export class UpdateAPIKeyRequest extends Message<UpdateAPIKeyRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UpdateAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.UpdateAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAPIKeyRequest {
    return new UpdateAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAPIKeyRequest {
    return new UpdateAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAPIKeyRequest {
    return new UpdateAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAPIKeyRequest | PlainMessage<UpdateAPIKeyRequest> | undefined, b: UpdateAPIKeyRequest | PlainMessage<UpdateAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAPIKeyRequest, a, b);
  }
}

/**
 * @generated from message llm.v1.UpdateAPIKeyResponse
 */
export class UpdateAPIKeyResponse extends Message<UpdateAPIKeyResponse> {
  /**
   * @generated from field: llm.v1.APIKey key = 1;
   */
  key?: APIKey;

  constructor(data?: PartialMessage<UpdateAPIKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.UpdateAPIKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: APIKey },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAPIKeyResponse {
    return new UpdateAPIKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAPIKeyResponse {
    return new UpdateAPIKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAPIKeyResponse {
    return new UpdateAPIKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAPIKeyResponse | PlainMessage<UpdateAPIKeyResponse> | undefined, b: UpdateAPIKeyResponse | PlainMessage<UpdateAPIKeyResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAPIKeyResponse, a, b);
  }
}

/**
 * @generated from message llm.v1.DeleteAPIKeyRequest
 */
export class DeleteAPIKeyRequest extends Message<DeleteAPIKeyRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteAPIKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.DeleteAPIKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAPIKeyRequest {
    return new DeleteAPIKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAPIKeyRequest | PlainMessage<DeleteAPIKeyRequest> | undefined, b: DeleteAPIKeyRequest | PlainMessage<DeleteAPIKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAPIKeyRequest, a, b);
  }
}

