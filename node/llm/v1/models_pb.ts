// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file llm/v1/models.proto (package llm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum llm.v1.FinishReason
 */
export enum FinishReason {
  /**
   * @generated from enum value: FINISH_REASON_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FINISH_REASON_LENGTH = 1;
   */
  LENGTH = 1,

  /**
   * @generated from enum value: FINISH_REASON_STOP = 2;
   */
  STOP = 2,

  /**
   * @generated from enum value: FINISH_REASON_ERROR = 3;
   */
  ERROR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(FinishReason)
proto3.util.setEnumType(FinishReason, "llm.v1.FinishReason", [
  { no: 0, name: "FINISH_REASON_UNSPECIFIED" },
  { no: 1, name: "FINISH_REASON_LENGTH" },
  { no: 2, name: "FINISH_REASON_STOP" },
  { no: 3, name: "FINISH_REASON_ERROR" },
]);

/**
 * @generated from message llm.v1.Provider
 */
export class Provider extends Message<Provider> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: google.protobuf.Struct config = 5;
   */
  config?: Struct;

  constructor(data?: PartialMessage<Provider>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.Provider";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "config", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provider {
    return new Provider().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provider {
    return new Provider().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provider {
    return new Provider().fromJsonString(jsonString, options);
  }

  static equals(a: Provider | PlainMessage<Provider> | undefined, b: Provider | PlainMessage<Provider> | undefined): boolean {
    return proto3.util.equals(Provider, a, b);
  }
}

/**
 * @generated from message llm.v1.Model
 */
export class Model extends Message<Model> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Model>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.Model";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Model {
    return new Model().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJsonString(jsonString, options);
  }

  static equals(a: Model | PlainMessage<Model> | undefined, b: Model | PlainMessage<Model> | undefined): boolean {
    return proto3.util.equals(Model, a, b);
  }
}

/**
 * @generated from message llm.v1.ProviderModels
 */
export class ProviderModels extends Message<ProviderModels> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated llm.v1.Model models = 2;
   */
  models: Model[] = [];

  constructor(data?: PartialMessage<ProviderModels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ProviderModels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "models", kind: "message", T: Model, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProviderModels {
    return new ProviderModels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProviderModels {
    return new ProviderModels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProviderModels {
    return new ProviderModels().fromJsonString(jsonString, options);
  }

  static equals(a: ProviderModels | PlainMessage<ProviderModels> | undefined, b: ProviderModels | PlainMessage<ProviderModels> | undefined): boolean {
    return proto3.util.equals(ProviderModels, a, b);
  }
}

/**
 * @generated from message llm.v1.Usage
 */
export class Usage extends Message<Usage> {
  /**
   * number of tokens in the prompt.
   *
   * @generated from field: optional int32 prompt_tokens = 1;
   */
  promptTokens?: number;

  /**
   * number of tokens in the generated completion.
   *
   * @generated from field: optional int32 completion_tokens = 2;
   */
  completionTokens?: number;

  /**
   * total number of tokens used in the request (prompt + completion).
   *
   * @generated from field: optional int32 total_tokens = 3;
   */
  totalTokens?: number;

  constructor(data?: PartialMessage<Usage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.Usage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prompt_tokens", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "completion_tokens", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "total_tokens", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Usage {
    return new Usage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Usage {
    return new Usage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Usage {
    return new Usage().fromJsonString(jsonString, options);
  }

  static equals(a: Usage | PlainMessage<Usage> | undefined, b: Usage | PlainMessage<Usage> | undefined): boolean {
    return proto3.util.equals(Usage, a, b);
  }
}

/**
 * @generated from message llm.v1.Function
 */
export class Function extends Message<Function> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string arguments = 2;
   */
  arguments = "";

  constructor(data?: PartialMessage<Function>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.Function";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "arguments", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Function {
    return new Function().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Function {
    return new Function().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Function {
    return new Function().fromJsonString(jsonString, options);
  }

  static equals(a: Function | PlainMessage<Function> | undefined, b: Function | PlainMessage<Function> | undefined): boolean {
    return proto3.util.equals(Function, a, b);
  }
}

/**
 * @generated from message llm.v1.ToolCallMessage
 */
export class ToolCallMessage extends Message<ToolCallMessage> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: llm.v1.Function function = 3;
   */
  function?: Function;

  constructor(data?: PartialMessage<ToolCallMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ToolCallMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "function", kind: "message", T: Function },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToolCallMessage {
    return new ToolCallMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToolCallMessage {
    return new ToolCallMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToolCallMessage {
    return new ToolCallMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ToolCallMessage | PlainMessage<ToolCallMessage> | undefined, b: ToolCallMessage | PlainMessage<ToolCallMessage> | undefined): boolean {
    return proto3.util.equals(ToolCallMessage, a, b);
  }
}

/**
 * @generated from message llm.v1.ChatCompletionMessage
 */
export class ChatCompletionMessage extends Message<ChatCompletionMessage> {
  /**
   * role of the message author. One of "system", "user", "assistant".
   *
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * content of the message
   *
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: google.protobuf.Struct logprobs = 3;
   */
  logprobs?: Struct;

  /**
   * @generated from field: repeated llm.v1.ToolCallMessage tool_calls = 4;
   */
  toolCalls: ToolCallMessage[] = [];

  constructor(data?: PartialMessage<ChatCompletionMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ChatCompletionMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "logprobs", kind: "message", T: Struct },
    { no: 4, name: "tool_calls", kind: "message", T: ToolCallMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChatCompletionMessage {
    return new ChatCompletionMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChatCompletionMessage {
    return new ChatCompletionMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChatCompletionMessage {
    return new ChatCompletionMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ChatCompletionMessage | PlainMessage<ChatCompletionMessage> | undefined, b: ChatCompletionMessage | PlainMessage<ChatCompletionMessage> | undefined): boolean {
    return proto3.util.equals(ChatCompletionMessage, a, b);
  }
}

/**
 * @generated from message llm.v1.CompletionChoice
 */
export class CompletionChoice extends Message<CompletionChoice> {
  /**
   * index of the choice in the list of choices.
   *
   * @generated from field: uint32 index = 1;
   */
  index = 0;

  /**
   * message generated by the model.
   *
   * @generated from field: llm.v1.ChatCompletionMessage message = 2;
   */
  message?: ChatCompletionMessage;

  /**
   * @generated from field: google.protobuf.Struct logprobs = 3;
   */
  logprobs?: Struct;

  /**
   * @generated from field: string finish_reason = 4;
   */
  finishReason = "";

  constructor(data?: PartialMessage<CompletionChoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.CompletionChoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "message", kind: "message", T: ChatCompletionMessage },
    { no: 3, name: "logprobs", kind: "message", T: Struct },
    { no: 4, name: "finish_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletionChoice {
    return new CompletionChoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletionChoice {
    return new CompletionChoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletionChoice {
    return new CompletionChoice().fromJsonString(jsonString, options);
  }

  static equals(a: CompletionChoice | PlainMessage<CompletionChoice> | undefined, b: CompletionChoice | PlainMessage<CompletionChoice> | undefined): boolean {
    return proto3.util.equals(CompletionChoice, a, b);
  }
}

/**
 * @generated from message llm.v1.Role
 */
export class Role extends Message<Role> {
  /**
   * @generated from oneof llm.v1.Role.role
   */
  role: {
    /**
     * @generated from field: string system = 1;
     */
    value: string;
    case: "system";
  } | {
    /**
     * @generated from field: string user = 2;
     */
    value: string;
    case: "user";
  } | {
    /**
     * @generated from field: string assistant = 3;
     */
    value: string;
    case: "assistant";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "system", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "role" },
    { no: 2, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "role" },
    { no: 3, name: "assistant", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "role" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * @generated from message llm.v1.ResponseFormat
 */
export class ResponseFormat extends Message<ResponseFormat> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  constructor(data?: PartialMessage<ResponseFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.ResponseFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseFormat {
    return new ResponseFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseFormat {
    return new ResponseFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseFormat {
    return new ResponseFormat().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseFormat | PlainMessage<ResponseFormat> | undefined, b: ResponseFormat | PlainMessage<ResponseFormat> | undefined): boolean {
    return proto3.util.equals(ResponseFormat, a, b);
  }
}

/**
 * @generated from message llm.v1.APIKey
 */
export class APIKey extends Message<APIKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  /**
   * @generated from field: string masked_value = 4;
   */
  maskedValue = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp last_used_at = 6;
   */
  lastUsedAt?: Timestamp;

  constructor(data?: PartialMessage<APIKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "llm.v1.APIKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "masked_value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "last_used_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): APIKey {
    return new APIKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): APIKey {
    return new APIKey().fromJsonString(jsonString, options);
  }

  static equals(a: APIKey | PlainMessage<APIKey> | undefined, b: APIKey | PlainMessage<APIKey> | undefined): boolean {
    return proto3.util.equals(APIKey, a, b);
  }
}

